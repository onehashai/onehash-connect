{
  "regular_tests": [
    {
      "name": "empty",
      "input": "",
      "expected_output": "",
      "text_content": ""
    },
    {
      "name": "codeblock_hilite_python",
      "input": "Hamlet said:\n~~~~.python \ndef speak(self):\n    x = 1\n~~~~",
      "expected_output": "<p>Hamlet said:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">speak</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
      "marked_expected_output": "<p>Hamlet said:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>def speak(self):\n    x = 1\n</code></pre></div>",
      "text_content": "Hamlet said:\ndef speak(self):\n    x = 1\n"
    },
    {
      "name": "codeblock_hilite_invented_language",
      "input": "``` inventedlanguage\ndef speak(self):\n    x = 1\n```",
      "expected_output": "<div class=\"codehilite\" data-code-language=\"inventedlanguage\"><pre><span></span><code>def speak(self):\n    x = 1\n</code></pre></div>",
      "text_content": "def speak(self):\n    x = 1\n"
    },
    {
      "name": "codeblock_canonicalize_lang_alias",
      "input": "``` py2\ndef speak(self):\n    x = 1\n```",
      "expected_output": "<div class=\"codehilite\" data-code-language=\"Python 2.x\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">speak</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
      "marked_expected_output": "<div class=\"codehilite\" data-code-language=\"Python 2.x\"><pre><span></span><code>def speak(self):\n    x = 1\n</code></pre></div>",
      "text_content": "def speak(self):\n    x = 1\n"
    },
    {
      "name": "ampampamp",
      "input": "& &amp; &amp;amp;\n~~~~\n& &amp; &amp;amp;\n~~~~\n    & &amp; &amp;amp;",
      "expected_output": "<p>&amp; &amp; &amp;amp;</p>\n<div class=\"codehilite\"><pre><span></span><code>&amp; &amp;amp; &amp;amp;amp;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>&amp; &amp;amp; &amp;amp;amp;\n</code></pre></div>"
    },
    {
      "name": "basic_paragraph",
      "input": "test_input",
      "expected_output": "<p>test_input</p>",
      "text_content": "test_input"
    },
    {
      "name": "codeblock_multiline",
      "input": "Hamlet once said\n~~~~\ndef func():\n    x = 1\n\n    y = 2\n\n    z = 3\n~~~~\nAnd all was good.",
      "expected_output": "<p>Hamlet once said</p>\n<div class=\"codehilite\"><pre><span></span><code>def func():\n    x = 1\n\n    y = 2\n\n    z = 3\n</code></pre></div>\n<p>And all was good.</p>",
      "text_content": "Hamlet once said\ndef func():\n    x = 1\n\n    y = 2\n\n    z = 3\n\nAnd all was good."
    },
    {
      "name": "normal_text_test",
      "input": "it's lunch time",
      "expected_output": "<p>it's lunch time</p>"
    },
    {
      "name": "codeblock_trailing_whitespace",
      "input": "Hamlet once said\n~~~~\ndef func():\n    x = 1\n\n    y = 2\t\t\n\n    z = 3       \n~~~~\nAnd all was good.",
      "expected_output": "<p>Hamlet once said</p>\n<div class=\"codehilite\"><pre><span></span><code>def func():\n    x = 1\n\n    y = 2\n\n    z = 3\n</code></pre></div>\n<p>And all was good.</p>",
      "text_content": "Hamlet once said\ndef func():\n    x = 1\n\n    y = 2\n\n    z = 3\n\nAnd all was good."
    },
    {
      "name": "inline_code_spaces",
      "input": "` outer ` ```    space    ```",
      "expected_output": "<p><code> outer </code> <code>    space    </code></p>",
      "text_content": " outer      space    "
    },
    {
      "name": "inline_code_html_entities",
      "input": "`<&nbsp;>`",
      "expected_output": "<p><code>&lt;&amp;nbsp;&gt;</code></p>",
      "text_content": "<&nbsp;>"
    },
    {
      "name": "codeblock_backticks",
      "input": "\n```\nfenced code\n```\n\n```inline code```\n",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code>fenced code\n</code></pre></div>\n<p><code>inline code</code></p>",
      "text_content": "fenced code\n\ninline code"
    },
    {
      "name": "hanging_multi_codeblock",
      "input": "Hamlet said:\n~~~~\ndef speak(self):\n    x = 1\n# Comment to make this code block longer to test Trac #1162\n~~~~\n\nThen he mentioned ````y = 4 + x**2```` and\n~~~~\ndef foobar(self):\n    return self.baz()",
      "expected_output": "<p>Hamlet said:</p>\n<div class=\"codehilite\"><pre><span></span><code>def speak(self):\n    x = 1\n# Comment to make this code block longer to test Trac #1162\n</code></pre></div>\n<p>Then he mentioned <code>y = 4 + x**2</code> and</p>\n<div class=\"codehilite\"><pre><span></span><code>def foobar(self):\n    return self.baz()\n</code></pre></div>",
      "text_content": "Hamlet said:\ndef speak(self):\n    x = 1\n# Comment to make this code block longer to test Trac #1162\n\nThen he mentioned y = 4 + x**2 and\ndef foobar(self):\n    return self.baz()\n"
    },
    {
      "name": "fenced_normal_quote",
      "input": "Hamlet said:\n~~~ quote\nTo be or **not** to be.\n\nThat is the question\n~~~",
      "expected_output": "<p>Hamlet said:</p>\n<blockquote>\n<p>To be or <strong>not</strong> to be.</p>\n<p>That is the question</p>\n</blockquote>",
      "text_content": "Hamlet said:\n> To be or not to be.\n> That is the question\n"
    },
    {
      "name": "fenced_nested_quote",
      "input": "Hamlet said:\n~~~ quote\nPolonius said:\n> This above all: to thine ownself be true,\nAnd it must follow, as the night the day,\nThou canst not then be false to any man.\n\nWhat good advice!\n~~~",
      "expected_output": "<p>Hamlet said:</p>\n<blockquote>\n<p>Polonius said:</p>\n<blockquote>\n<p>This above all: to thine ownself be true,<br>\nAnd it must follow, as the night the day,<br>\nThou canst not then be false to any man.</p>\n</blockquote>\n<p>What good advice!</p>\n</blockquote>",
      "text_content": "Hamlet said:\n> Polonius said:\n> > This above all: to thine ownself be true,\n> > And it must follow, as the night the day,\n> > Thou canst not then be false to any man.\n> What good advice!\n"
    },
    {
      "name": "fenced_complexly_nested_quote",
      "input": "I heard about this second hand...\n~~~ quote\n\nHe said:\n~~~ quote\nThe customer is complaining.\n\nThey looked at this code:\n``` \ndef hello(): print 'hello\n```\nThey would prefer:\n~~~\ndef hello()\n  puts 'hello'\nend\n~~~\n\nPlease advise.\n~~~\n\nShe said:\n~~~ quote\nJust send them this:\n```\necho \"hello\n\"\n```\n~~~",
      "expected_output": "<p>I heard about this second hand...</p>\n<blockquote>\n<p>He said:</p>\n<blockquote>\n<p>The customer is complaining.</p>\n<p>They looked at this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>def hello(): print &#39;hello\n</code></pre></div>\n<p>They would prefer:</p>\n</blockquote>\n<p>def hello()<br>\n  puts 'hello'<br>\nend</p>\n</blockquote>\n<p>Please advise.</p>\n<div class=\"codehilite\"><pre><span></span><code>She said:\n~~~ quote\nJust send them this:\n```\necho &quot;hello\n&quot;\n```\n</code></pre></div>",
      "text_content": "I heard about this second hand...\n> He said:\n> > The customer is complaining.\n> > They looked at this code:\n> > def hello(): print 'hello\n> > They would prefer:\n> def hello()\n>   puts 'hello'\n> end\n\nPlease advise.\nShe said:\n~~~ quote\nJust send them this:\n```\necho \"hello\n\"\n```\n"
    },
    {
      "name": "fenced_quotes_inside_mathblock",
      "input": "```math\n````js\nvar x;\n````\n```",
      "expected_output": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">‘</mi><mi mathvariant=\"normal\">‘</mi><mi mathvariant=\"normal\">‘</mi><mi mathvariant=\"normal\">‘</mi><mi>j</mi><mi>s</mi><mi>v</mi><mi>a</mi><mi>r</mi><mi>x</mi><mo separator=\"true\">;</mo><mi mathvariant=\"normal\">‘</mi><mi mathvariant=\"normal\">‘</mi><mi mathvariant=\"normal\">‘</mi><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">````js\nvar x;\n````</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">‘‘‘‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">‘‘‘‘</span></span></span></span></span></p>"
    },
    {
      "name": "empty_single_blockquote",
      "input": ">",
      "expected_output": "<p>&gt;</p>"
    },
    {
      "name": "empty_multiple_blockquote",
      "input": ">>>>>",
      "expected_output": "<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>"
    },
    {
      "name": "non_empty_blockquote",
      "input": ">\n>\ntext",
      "expected_output": "<blockquote>\n<p>text</p>\n</blockquote>"
    },
    {
      "name": "multiple_blockquote_with_angular_bracket",
      "input": "> Hello World!\n\n> Hello Universe!",
      "expected_output": "<blockquote>\n<p>Hello World!</p>\n</blockquote>\n<blockquote>\n<p>Hello Universe!</p>\n</blockquote>"
    },
    {
      "name": "multiple_blockquote_with_backticks_and_angular_bracket",
      "input": "```quote\nText in\nmultiple lines.\n```\n\n> Text in a single line.",
      "expected_output": "<blockquote>\n<p>Text in<br>\nmultiple lines.</p>\n</blockquote>\n<blockquote>\n<p>Text in a single line.</p>\n</blockquote>"
    },
    {
      "name": "multiple_blockquote_with_quote_and_reply",
      "input": "Hamlet said:\n~~~quote\nCan we talk ?\n~~~\n> Yes !!\n\nWelcome to Open Source.",
      "expected_output": "<p>Hamlet said:</p>\n<blockquote>\n<p>Can we talk ?</p>\n</blockquote>\n<blockquote>\n<p>Yes !!</p>\n</blockquote>\n<p>Welcome to Open Source.</p>",
      "text_content": "Hamlet said:\n> Can we talk ?\n\n> Yes !!\n\nWelcome to Open Source."
    },
    {
      "name": "fenced_quote_with_hashtag",
      "input": "```quote\n# line 1\n#line 2\n```",
      "expected_output": "<blockquote>\n<h1>line 1</h1>\n<p>#line 2</p>\n</blockquote>",
      "text_content": "> line 1\n> #line 2\n"
    },
    {
      "name": "fenced_quote_and_list",
      "input": "Before:\n* One.\n* Two.\n\n```quote\nLists should work after a quote\n```\n\nAfter:\n* One.\n* Two.",
      "expected_output": "<p>Before:</p>\n<ul>\n<li>One.</li>\n<li>Two.</li>\n</ul>\n<blockquote>\n<p>Lists should work after a quote</p>\n</blockquote>\n<p>After:</p>\n<ul>\n<li>One.</li>\n<li>Two.</li>\n</ul>",
      "text_content": "Before:\n\nOne.\nTwo.\n\n> Lists should work after a quote\n\nAfter:\n\nOne.\nTwo.\n"
    },
    {
      "name": "dangerous_block_having_x",
      "input": "xxxxxx xxxxx xxxxxxxx xxxx. x xxxx xxxxxxxxxx:\n\n```\"xxxx xxxx\\xxxxx\\xxxxxx\"```\n\nxxx xxxx xxxxx:```xx.xxxxxxx(x'^xxxx$', xx.xxxxxxxxx)```\n\nxxxxxxx'x xxxx xxxxxxxxxx ```'xxxx'```, xxxxx xxxxxxxxx xxxxx ^ xxx $ xxxxxx xxxxx xxxxxxxxxxxx xxx xxxx xx x xxxx xx xxxx xx xxx xxxxx xxxxxx?",
      "expected_output": "<p>xxxxxx xxxxx xxxxxxxx xxxx. x xxxx xxxxxxxxxx:</p>\n<p><code>\"xxxx xxxx\\xxxxx\\xxxxxx\"</code></p>\n<p>xxx xxxx xxxxx:<code>xx.xxxxxxx(x'^xxxx$', xx.xxxxxxxxx)</code></p>\n<p>xxxxxxx'x xxxx xxxxxxxxxx <code>'xxxx'</code>, xxxxx xxxxxxxxx xxxxx ^ xxx $ xxxxxx xxxxx xxxxxxxxxxxx xxx xxxx xx x xxxx xx xxxx xx xxx xxxxx xxxxxx?</p>",
      "text_content": "xxxxxx xxxxx xxxxxxxx xxxx. x xxxx xxxxxxxxxx:\n\"xxxx xxxx\\xxxxx\\xxxxxx\"\nxxx xxxx xxxxx:xx.xxxxxxx(x'^xxxx$', xx.xxxxxxxxx)\nxxxxxxx'x xxxx xxxxxxxxxx 'xxxx', xxxxx xxxxxxxxx xxxxx ^ xxx $ xxxxxx xxxxx xxxxxxxxxxxx xxx xxxx xx x xxxx xx xxxx xx xxx xxxxx xxxxxx?"
    },
    {
      "name": "dangerous_block_having_backticks",
      "input": "``` one ```\n\n``` two ```\n\n~~~~\nx = 1",
      "expected_output": "<p><code> one </code></p>\n<p><code> two </code></p>\n<div class=\"codehilite\"><pre><span></span><code>x = 1\n</code></pre></div>",
      "text_content": " one \n two \nx = 1\n"
    },
    {
      "name": "four_space_code_block",
      "input": "    def foo(): pass",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code>def foo(): pass\n</code></pre></div>",
      "text_content": "def foo(): pass\n"
    },
    {
      "name": "two_space_not_code_block",
      "input": "  notcode",
      "expected_output": "<p>notcode</p>",
      "marked_expected_output": "<p>  notcode</p>",
      "text_content": "notcode"
    },
    {
      "name": "hashheading_enabled",
      "input": "# Hello world",
      "expected_output": "<h1>Hello world</h1>"
    },
    {
      "name": "hashheading_needs_spaces",
      "input": "#Hello world",
      "expected_output": "<p>#Hello world</p>"
    },
    {
      "name": "hashheading_multiple_spaces",
      "input": "#  Hello world",
      "expected_output": "<h1>Hello world</h1>"
    },
    {
      "name": "hashheading_6_levels",
      "input": "###### Hello world",
      "expected_output": "<h6>Hello world</h6>"
    },
    {
      "name": "hashheading_7_levels",
      "input": "####### Hello world",
      "expected_output": "<p>####### Hello world</p>"
    },
    {
      "name": "reference_links_disabled",
      "input": "Hello [world]\n\n[world]: https://google.com",
      "expected_output": "<p>Hello [world]</p>\n<p>[world]: <a href=\"https://google.com\">https://google.com</a></p>"
    },
    {
      "name": "reference_links_disabled_2",
      "input": "Hello [world][ref-name]\n\n[ref-name]: https://google.com",
      "expected_output": "<p>Hello [world][ref-name]</p>\n<p>[ref-name]: <a href=\"https://google.com\">https://google.com</a></p>"
    },
    {
      "name": "ulist_standard_1",
      "input": "Some text with a list:\n\n* One item\n* Two items\n* Three items",
      "expected_output": "<p>Some text with a list:</p>\n<ul>\n<li>One item</li>\n<li>Two items</li>\n<li>Three items</li>\n</ul>",
      "text_content": "Some text with a list:\n\nOne item\nTwo items\nThree items\n"
    },
    {
      "name": "ulist_standard_2",
      "input": "Some text with a list:\n\n- One item\n- Two items\n- Three items",
      "expected_output": "<p>Some text with a list:</p>\n<ul>\n<li>One item</li>\n<li>Two items</li>\n<li>Three items</li>\n</ul>",
      "text_content": "Some text with a list:\n\nOne item\nTwo items\nThree items\n"
    },
    {
      "name": "ulist_standard_3",
      "input": "Some text with a list:\n\n+ One item\n+ Two items\n+ Three items",
      "expected_output": "<p>Some text with a list:</p>\n<ul>\n<li>One item</li>\n<li>Two items</li>\n<li>Three items</li>\n</ul>",
      "text_content": "Some text with a list:\n\nOne item\nTwo items\nThree items\n"
    },
    {
      "name": "list_complexly_nested",
      "input": "This is a heavily nested OL\n1. level-1\n  2. level-2\n    3. level-3\n    3. level-3a\n  2. level-2a\n2. level-1a\n",
      "expected_output": "<p>This is a heavily nested OL</p>\n<ol>\n<li>level-1<ol start=\"2\">\n<li>level-2<ol start=\"3\">\n<li>level-3</li>\n<li>level-3a</li>\n</ol>\n</li>\n<li>level-2a</li>\n</ol>\n</li>\n<li>level-1a</li>\n</ol>"
    },
    {
      "name": "list_codeblock_interference",
      "input": "para:\n\n    1. list-1\n    2. list-2\n      1. list-2a\n    3. list-3\n",
      "expected_output": "<p>para:</p>\n<div class=\"codehilite\"><pre><span></span><code>1. list-1\n2. list-2\n  1. list-2a\n3. list-3\n</code></pre></div>"
    },
    {
      "name": "ulist_mixed_bullets",
      "input": "Combine four lists:\n\n* One\n- Two\n+ Three\n- Four\n- Five",
      "expected_output": "<p>Combine four lists:</p>\n<ul>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n<li>Four</li>\n<li>Five</li>\n</ul>",
      "marked_expected_output": "<p>Combine four lists:</p>\n<ul>\n<li>One</li>\n</ul>\n<ul>\n<li>Two</li>\n</ul>\n<ul>\n<li>Three</li>\n</ul>\n<ul>\n<li>Four</li>\n<li>Five</li>\n</ul>",
      "text_content": "Combine four lists:\n\nOne\nTwo\nThree\nFour\nFive\n"
    },
    {
      "name": "ulist_hanging",
      "input": "Some text with a hanging list:\n* One item\n* Two items\n* Three items",
      "expected_output": "<p>Some text with a hanging list:</p>\n<ul>\n<li>One item</li>\n<li>Two items</li>\n<li>Three items</li>\n</ul>",
      "text_content": "Some text with a hanging list:\n\nOne item\nTwo items\nThree items\n"
    },
    {
      "name": "ulist_codeblock_interference",
      "input": "* One \n  * Two\n\n    Two continued\n    This shouldn't be a code block\n",
      "expected_output": "<ul>\n<li>One <ul>\n<li>\n<p>Two</p>\n<p>Two continued<br>\nThis shouldn't be a code block</p>\n</li>\n</ul>\n</li>\n</ul>",
      "marked_expected_output":"<ul>\n<li><p>One </p>\n<ul>\n<li><p>Two</p>\n<p>Two continued<br>\nThis shouldn't be a code block</p>\n</li>\n</ul>\n</li>\n</ul>",
      "text_content": "\nOne \n\nTwo\nTwo continued\nThis shouldn't be a code block\n\n\n\n"
    },
    {
      "name": "ulist_hanging_mixed",
      "input": "Plain list\n\n* Alpha\n\n* Beta\n\nThen hang it off:\n* Ypsilon\n* Zeta",
      "expected_output": "<p>Plain list</p>\n<ul>\n<li>\n<p>Alpha</p>\n</li>\n<li>\n<p>Beta</p>\n</li>\n</ul>\n<p>Then hang it off:</p>\n<ul>\n<li>Ypsilon</li>\n<li>Zeta</li>\n</ul>",
      "marked_expected_output": "<p>Plain list</p>\n<ul>\n<li><p>Alpha</p>\n</li>\n<li><p>Beta</p>\n</li>\n</ul>\n<p>Then hang it off:</p>\n<ul>\n<li>Ypsilon</li>\n<li>Zeta</li>\n</ul>",
      "text_content": "Plain list\n\n\nAlpha\n\n\nBeta\n\n\nThen hang it off:\n\nYpsilon\nZeta\n"
    },
    {
      "name": "ulist_hanging_multi",
      "input": "Plain list\n* Alpha\n* Beta\n\nAnd again:\n* A\n* B\n* C\n\nOnce more for feeling:\n* Q\n* E\n* D",
      "expected_output": "<p>Plain list</p>\n<ul>\n<li>Alpha</li>\n<li>Beta</li>\n</ul>\n<p>And again:</p>\n<ul>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ul>\n<p>Once more for feeling:</p>\n<ul>\n<li>Q</li>\n<li>E</li>\n<li>D</li>\n</ul>",
      "text_content": "Plain list\n\nAlpha\nBeta\n\nAnd again:\n\nA\nB\nC\n\nOnce more for feeling:\n\nQ\nE\nD\n"
    },
    {
      "name": "ulist_hanging_quoted",
      "input": "```quote\nSome text with a hanging list inside quote:\n* one\n* two\n* three\n```",
      "expected_output": "<blockquote>\n<p>Some text with a hanging list inside quote:</p>\n<ul>\n<li>one</li>\n<li>two</li>\n<li>three</li>\n</ul>\n</blockquote>",
      "text_content": "> Some text with a hanging list inside quote:\n> one\n> two\n> three\n"
    },
    {
      "name": "ulist_nested_ulist_two_space_indent",
      "input": "Nested list\n* I am outer list\n  * I am inner nested list first item\n  * I am inner nested list second item",
      "expected_output": "<p>Nested list</p>\n<ul>\n<li>I am outer list<ul>\n<li>I am inner nested list first item</li>\n<li>I am inner nested list second item</li>\n</ul>\n</li>\n</ul>",
      "text_content": "Nested list\n\nI am outer list\nI am inner nested list first item\nI am inner nested list second item\n\n\n"
    },
    {
      "name": "ulist_list_two_space_indent",
      "input": "* I am outer list\n  I am something inside",
      "expected_output": "<ul>\n<li>I am outer list<br>\n  I am something inside</li>\n</ul>",
      "marked_expected_output": "<ul>\n<li>I am outer list<br>\nI am something inside</li>\n</ul>",
      "text_content": "\nI am outer list\n  I am something inside\n"
    },
    {
      "name": "ulist_codeblock",
      "input": "~~~\nint x = 3\n* 4;\n~~~",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code>int x = 3\n* 4;\n</code></pre></div>",
      "text_content": "int x = 3\n* 4;\n"
    },
    {
      "name": "malformed_fence",
      "input": "~~~~~~~~xxxxxxxxx:  xxxxxxxxxxxx xxxxx x xxxxxxxx~~~~~~",
      "expected_output": "<p>~~~~~~~~xxxxxxxxx:  xxxxxxxxxxxx xxxxx x xxxxxxxx~~~~~~</p>",
      "text_content": "~~~~~~~~xxxxxxxxx:  xxxxxxxxxxxx xxxxx x xxxxxxxx~~~~~~"
    },
    {
      "name": "strikthrough_basic",
      "input": "I like ~~software~~ hardware",
      "expected_output": "<p>I like <del>software</del> hardware</p>",
      "text_content": "I like software hardware"
    },
    {
      "name": "strikthrough_multiword_with_no_space_in_between",
      "input": "I ~~like software~~ love hardware",
      "expected_output": "<p>I <del>like software</del> love hardware</p>",
      "text_content": "I like software love hardware"
    },
    {
      "name": "strikthrough_multiword_with_space_in_between",
      "input": "I ~~ like software ~~ love hardware",
      "expected_output": "<p>I <del> like software </del> love hardware</p>",
      "text_content": "I  like software  love hardware"
    },
    {
      "name": "strikthrough_link",
      "input": "~~test http://xx.xx link~~",
      "expected_output": "<p><del>test <a href=\"http://xx.xx\">http://xx.xx</a> link</del></p>",
      "text_content": "test http://xx.xx link"
    },
    {
      "name": "underscore_disabled",
      "input": "_foo_",
      "expected_output": "<p>_foo_</p>"
    },
    {
      "name": "emphasis_text",
      "input": "*foo*",
      "expected_output": "<p><em>foo</em></p>",
      "text_content": "foo"
    },
    {
      "name": "emphasis_code",
      "input": "const char *x = (char *)y",
      "expected_output": "<p>const char *x = (char *)y</p>"
    },
    {
      "name": "emphasis_with_space",
      "input": "A *foo bar* is a *baz quux*",
      "expected_output": "<p>A <em>foo bar</em> is a <em>baz quux</em></p>",
      "text_content": "A foo bar is a baz quux"
    },
    {
      "name": "emphasis_with_html",
      "input": "*<h1>Hello world</h1>*",
      "expected_output": "<p><em>&lt;h1&gt;Hello world&lt;/h1&gt;</em></p>"
    },
    {
      "name": "underscore_strong_disabled",
      "input": "__foo__",
      "expected_output": "<p>__foo__</p>"
    },
    {
      "name": "star_strong",
      "input": "**foo**",
      "expected_output": "<p><strong>foo</strong></p>",
      "text_content": "foo"
    },
    {
      "name": "star_emoji",
      "input": "**:smile:**",
      "expected_output": "<p><strong><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></strong></p>",
      "text_content": "\ud83d\ude42"
    },
    {
      "name": "star_strong_em",
      "input": "***foo***",
      "expected_output": "<p><strong><em>foo</em></strong></p>",
      "text_content": "foo"
    },
    {
      "name": "strong_with_html",
      "input": "**<h1>Hello world</h1>**",
      "expected_output": "<p><strong>&lt;h1&gt;Hello world&lt;/h1&gt;</strong></p>"
    },
    {
      "name": "numbered_list",
      "input": "1. A\n2. B\n  3. C",
      "expected_output": "<ol>\n<li>A</li>\n<li>B<ol start=\"3\">\n<li>C</li>\n</ol>\n</li>\n</ol>",
      "text_content": "1. A\n2. B\n  3. C"
    },
    {
      "name": "auto_renumbered_list_trick",
      "input": "1. A\n1. B\n  1. C\n1. D",
      "expected_output": "<ol>\n<li>A</li>\n<li>B<ol>\n<li>C</li>\n</ol>\n</li>\n<li>D</li>\n</ol>",
      "text_content": "1. A\n2. B\n  1. C\n3. D"
    },
    {
      "name": "auto_renumbered_list_from",
      "input": "3. A\n3. B\n3. C\n3. D",
      "expected_output": "<ol start=\"3\">\n<li>A</li>\n<li>B</li>\n<li>C</li>\n<li>D</li>\n</ol>",
      "text_content": "3. A\n4. B\n5. C\n6. D"
    },
    {
      "name": "two_auto_renumbered_lists",
      "input": "1. A\n3. B\n  2. C\n1. D",
      "expected_output": "<ol>\n<li>A</li>\n<li>B<ol start=\"2\">\n<li>C</li>\n</ol>\n</li>\n<li>D</li>\n</ol>",
      "text_content": "1. A\n2. B\n  2. C\n3. D"
    },
    {
      "name": "linkify_interference",
      "input": "link: xx, x xxxxx xx xxxx xx\n\n[xxxxx #xx](http://xxxxxxxxx:xxxx/xxx/xxxxxx%78xxxx/xx/):**xxxxxxx**\n\nxxxxxxx xxxxx xxxx xxxxx:\n`xxxxxx`: xxxxxxx\n`xxxxxx`: xxxxx\n`xxxxxx`: xxxxx xxxxx",
      "expected_output": "<p>link: xx, x xxxxx xx xxxx xx</p>\n<p><a href=\"http://xxxxxxxxx:xxxx/xxx/xxxxxx%78xxxx/xx/\">xxxxx #xx</a>:<strong>xxxxxxx</strong></p>\n<p>xxxxxxx xxxxx xxxx xxxxx:<br>\n<code>xxxxxx</code>: xxxxxxx<br>\n<code>xxxxxx</code>: xxxxx<br>\n<code>xxxxxx</code>: xxxxx xxxxx</p>",
      "text_content": "link: xx, x xxxxx xx xxxx xx\nxxxxx #xx:xxxxxxx\nxxxxxxx xxxxx xxxx xxxxx:\nxxxxxx: xxxxxxx\nxxxxxx: xxxxx\nxxxxxx: xxxxx xxxxx"
    },
    {
      "name": "inline_image",
      "input": "Google logo today: https://www.google.com/images/srpr/logo4w.png\nKinda boring",
      "expected_output": "<p>Google logo today: <a href=\"https://www.google.com/images/srpr/logo4w.png\">https://www.google.com/images/srpr/logo4w.png</a><br>\nKinda boring</p>\n<div class=\"message_inline_image\"><a href=\"https://www.google.com/images/srpr/logo4w.png\"><img data-src-fullsize=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=full\" src=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=thumbnail\"></a></div>",
      "backend_only_rendering": true,
      "text_content": "Google logo today: https:\/\/www.google.com\/images\/srpr\/logo4w.png\nKinda boring\n"
    },
    {
      "name": "blockquote_inline_image",
      "input": ">Google logo today:\n>https://www.google.com/images/srpr/logo4w.png\n>Kinda boring",
      "expected_output": "<blockquote>\n<p>Google logo today:<br>\n<a href=\"https://www.google.com/images/srpr/logo4w.png\">https://www.google.com/images/srpr/logo4w.png</a><br>\nKinda boring</p>\n</blockquote>",
      "backend_only_rendering": true,
      "text_content": "> Google logo today:\n> https:\/\/www.google.com\/images\/srpr\/logo4w.png\n> Kinda boring\n"
    },
    {
      "name": "two_inline_images",
      "input": "Google logo today: https://www.google.com/images/srpr/logo4w.png\nKinda boring\nZulip logo: https://zulip.com/static/images/logo/zulip-icon-128x128.png",
      "expected_output": "<p>Google logo today: <a href=\"https:\/\/www.google.com\/images\/srpr\/logo4w.png\">https:\/\/www.google.com\/images\/srpr\/logo4w.png<\/a><br>\nKinda boring<br>\nZulip logo: <a href=\"https:\/\/zulip.com\/static\/images\/logo\/zulip-icon-128x128.png\">https:\/\/zulip.com\/static\/images\/logo\/zulip-icon-128x128.png<\/a><\/p>\n<div class=\"message_inline_image\"><a href=\"https:\/\/www.google.com\/images\/srpr\/logo4w.png\"><img data-src-fullsize=\"\/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=full\" src=\"\/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=thumbnail\"><\/a><\/div><div class=\"message_inline_image\"><a href=\"https:\/\/zulip.com\/static\/images\/logo\/zulip-icon-128x128.png\"><img data-src-fullsize=\"\/thumbnail?url=https%3A%2F%2Fzulip.com%2Fstatic%2Fimages%2Flogo%2Fzulip-icon-128x128.png&amp;size=full\" src=\"\/thumbnail?url=https%3A%2F%2Fzulip.com%2Fstatic%2Fimages%2Flogo%2Fzulip-icon-128x128.png&amp;size=thumbnail\"><\/a><\/div>",
      "backend_only_rendering": true,
      "text_content": "Google logo today: https:\/\/www.google.com\/images\/srpr\/logo4w.png\nKinda boring\nZulip logo: https:\/\/zulip.com\/static\/images\/logo\/zulip-icon-128x128.png\n"
    },
    {
      "name": "deduplicate_inline_previews",
      "input": "Google logo today: https://www.google.com/images/srpr/logo4w.png\nKinda boringGoogle logo today: https://www.google.com/images/srpr/logo4w.png\nKinda boring",
      "expected_output": "<p>Google logo today: <a href=\"https://www.google.com/images/srpr/logo4w.png\">https://www.google.com/images/srpr/logo4w.png</a><br>\nKinda boringGoogle logo today: <a href=\"https://www.google.com/images/srpr/logo4w.png\">https://www.google.com/images/srpr/logo4w.png</a><br>\nKinda boring</p>\n<div class=\"message_inline_image\"><a href=\"https://www.google.com/images/srpr/logo4w.png\"><img data-src-fullsize=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=full\" src=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=thumbnail\"></a></div>",
      "backend_only_rendering": true,
      "text_content": "Google logo today: https:\/\/www.google.com\/images\/srpr\/logo4w.png\nKinda boringGoogle logo today: https:\/\/www.google.com\/images\/srpr\/logo4w.png\nKinda boring\n"
    },
    {
      "name": "bulleted_list_inlining",
      "input": "* Google?\n* Google. https://www.google.com/images/srpr/logo4w.png\n* Google!",
      "expected_output": "<ul>\n<li>Google?</li>\n<li>Google. <a href=\"https://www.google.com/images/srpr/logo4w.png\">https://www.google.com/images/srpr/logo4w.png</a><div class=\"message_inline_image\"><a href=\"https://www.google.com/images/srpr/logo4w.png\"><img data-src-fullsize=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=full\" src=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=thumbnail\"></a></div></li>\n<li>Google!</li>\n</ul>",
      "backend_only_rendering": true,
      "text_content": "\nGoogle?\nGoogle. https://www.google.com/images/srpr/logo4w.png\nGoogle!\n"
    },
    {
      "name": "only_inline_image",
      "input": "https://www.google.com/images/srpr/logo4w.png",
      "expected_output": "<div class=\"message_inline_image\"><a href=\"https://www.google.com/images/srpr/logo4w.png\"><img data-src-fullsize=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=full\" src=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=thumbnail\"></a></div>",
      "backend_only_rendering": true
    },
    {
      "name": "only_named_inline_image",
      "input": "[Google link](https://www.google.com/images/srpr/logo4w.png)",
      "expected_output": "<p><a href=\"https://www.google.com/images/srpr/logo4w.png\">Google link</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.google.com/images/srpr/logo4w.png\" title=\"Google link\"><img data-src-fullsize=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=full\" src=\"/thumbnail?url=https%3A%2F%2Fwww.google.com%2Fimages%2Fsrpr%2Flogo4w.png&amp;size=thumbnail\"></a></div>",
      "backend_only_rendering": true,
      "text_content": "Google link\n"
    },
    {
      "name": "only_non_image_link",
      "input": "https://github.com",
      "expected_output": "<p><a href=\"https://github.com\">https://github.com</a></p>"
    },
    {
      "name": "only_inline_video",
      "input": "https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4",
      "expected_output": "<div class=\"message_inline_image message_inline_video\"><a href=\"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\"><video data-video-original-url=\"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\" preload=\"metadata\" src=\"https://external-content.zulipcdn.net/external_content/785b3eb6f6165491371895ba42ead0e3661ae44b/68747470733a2f2f66696c652d6578616d706c65732d636f6d2e6769746875622e696f2f75706c6f6164732f323031372f30342f66696c655f6578616d706c655f4d50345f3438305f315f354d472e6d7034\"></video></a></div>",
      "backend_only_rendering": true
    },
    {
      "name": "only_named_inline_video",
      "input": "[Google link](https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4)",
      "expected_output": "<p><a href=\"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\">Google link</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\" title=\"Google link\"><video data-video-original-url=\"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4\" preload=\"metadata\" src=\"https://external-content.zulipcdn.net/external_content/785b3eb6f6165491371895ba42ead0e3661ae44b/68747470733a2f2f66696c652d6578616d706c65732d636f6d2e6769746875622e696f2f75706c6f6164732f323031372f30342f66696c655f6578616d706c655f4d50345f3438305f315f354d472e6d7034\"></video></a></div>",
      "backend_only_rendering": true,
      "text_content": "Google link\n"
    },
    {
      "name": "link_with_text",
      "input": "[hello](https://github.com)",
      "expected_output": "<p><a href=\"https://github.com\">hello</a></p>"
    },
    {
      "name": "link_without_text",
      "input": "[](https://github.com)",
      "expected_output": "<p><a href=\"https://github.com\">https://github.com</a></p>"
    },
    {
      "name": "link_with_empty_text",
      "input": "[  ](https://github.com)",
      "expected_output": "<p><a href=\"https://github.com\">https://github.com</a></p>"
    },
    {
      "name": "fragment_link",
      "input": "[foo](http://zulip.testserver/#narrow/stream/1-Denmark)",
      "expected_output": "<p><a href=\"#narrow/stream/1-Denmark\">foo</a></p>",
      "marked_expected_output": "<p><a href=\"http://zulip.testserver/#narrow/stream/1-Denmark\">foo</a></p>"
    },
    {
      "name": "not_fragment_link",
      "input": "[foo](http://zulip.testserver/https://example.com)",
      "expected_output": "<p><a href=\"http://zulip.testserver/https://example.com\">foo</a></p>"
    },
    {
      "name": "nl2br",
      "input": "test\nbar",
      "expected_output": "<p>test<br>\nbar</p>",
      "text_content": "test\nbar"
    },
    {
      "name": "nl2br_trailing_space",
      "input": "test  ",
      "expected_output": "<p>test  </p>",
      "text_content": "test  "
    },
    {
      "name": "tables",
      "input": "This is a table:\n\nFirst header  | Second header\n------------- | -------------\nContent cell  | Content cell\nContent cell  | Content cell\n",
      "expected_output": "<p>This is a table:</p>\n<table>\n<thead>\n<tr>\n<th>First header</th>\n<th>Second header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content cell</td>\n<td>Content cell</td>\n</tr>\n<tr>\n<td>Content cell</td>\n<td>Content cell</td>\n</tr>\n</tbody>\n</table>",
      "text_content": "This is a table:\n\n\n\nFirst header\nSecond header\n\n\n\n\nContent cell\nContent cell\n\n\nContent cell\nContent cell\n\n\n"
    },
    {
      "name": "multiline_strong",
      "input": "You can check out **any time you'd like\nBut you can never leave**",
      "expected_output": "<p>You can check out **any time you'd like<br>\nBut you can never leave**</p>",
      "marked_expected_output": "<p>You can check out <strong>any time you&#x27;d like<br>\nBut you can never leave</strong></p>",
      "text_content": "You can check out **any time you'd like\nBut you can never leave**"
    },
    {
      "name": "many_emoji",
      "input":  "test :smile: again :poop:\n:) foo:)bar x::y::z :wasted waste: :fakeemojithisshouldnotrender:",
      "expected_output": "<p>test <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> again <span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span><br>\n:) foo:)bar x::y::z :wasted waste: :fakeemojithisshouldnotrender:</p>",
      "text_content": "test \ud83d\ude42 again \ud83d\udca9\n:) foo:)bar x::y::z :wasted waste: :fakeemojithisshouldnotrender:"
    },
    {
      "name": "translate_emoticons_not_enabled",
      "input": ":)",
      "expected_output": "<p>:)</p>",
      "text_content": ":)",
      "translate_emoticons": false
    },
    {
      "name": "translate_emoticons_enabled",
      "input": ":)",
      "expected_output": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
      "text_content": "\ud83d\ude42",
      "translate_emoticons": true
    },
    {
      "name": "translate_emoticons",
      "input":  ":) foo :( bar <3 with space : ) real emoji :smile:",
      "expected_output": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> foo <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> bar <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> with space : ) real emoji <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
      "text_content": "\ud83d\ude42 foo \ud83d\ude41 bar \u2764 with space : ) real emoji \ud83d\ude42",
      "translate_emoticons": true
    },
    {
      "name": "translate_emoticons_whitespace",
      "input":  "a:) ;)b",
      "expected_output": "<p>a:) ;)b</p>",
      "text_content": "a:) ;)b",
      "translate_emoticons": true
    },
    {
      "name": "translate_emoticons_newline",
      "input":  ":) test\n:) test",
      "expected_output": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> test<br>\n<span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> test</p>",
      "text_content": "\ud83d\ude42 test\n\ud83d\ude42 test",
      "translate_emoticons": true
    },
    {
      "name": "translate_emoticons_in_code",
      "input":  "`:)`",
      "expected_output": "<p><code>:)</code></p>",
      "text_content": ":)",
      "translate_emoticons": true
    },
    {
      "name": "translate_emoticons_at_sentence_end",
      "input": "Translate this :).",
      "expected_output": "<p>Translate this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
      "text_content": "Translate this \ud83d\ude42.",
      "translate_emoticons": true
    },
    {
      "name": "translate_emoticons_between_symbols",
      "input": "Translate this !:)?",
      "expected_output": "<p>Translate this !<span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>?</p>",
      "marked_expected_output": "<p>Translate this !:)?</p>",
      "text_content": "Translate this !\ud83d\ude42?",
      "translate_emoticons": true
    },
    {
      "name": "random_emoji_1",
      "input": ":airplane:",
      "expected_output": "<p><span aria-label=\"airplane\" class=\"emoji emoji-2708\" role=\"img\" title=\"airplane\">:airplane:</span></p>"
    },
    {
      "name": "zulip_emoji",
      "input": ":zulip:",
      "expected_output": "<p><img alt=\":zulip:\" class=\"emoji\" src=\"/static/generated/emoji/images/emoji/unicode/zulip.png\" title=\"zulip\"></p>",
      "text_content": ":zulip:"
    },
    {
      "name": "random_emoji_2",
      "input": ":poop:",
      "expected_output": "<p><span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span></p>"
    },
    {
      "name": "emoji_sequence_one",
      "input": "🤷‍♀️",
      "expected_output": "<p><span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>"
    },
    {
      "name": "emoji_sequence_two",
      "input": "👁‍🗨 #️⃣",
      "expected_output": "<p><span aria-label=\"eye in speech bubble\" class=\"emoji emoji-1f441-200d-1f5e8\" role=\"img\" title=\"eye in speech bubble\">:eye_in_speech_bubble:</span> <span aria-label=\"hash\" class=\"emoji emoji-0023-20e3\" role=\"img\" title=\"hash\">:hash:</span></p>"
    },
    {
      "name": "unrecognized_emoji_sequence_one",
      "input": "pheonix bird from 15.1: 🐦‍🔥",
      "expected_output": "<p>pheonix bird from 15.1: 🐦‍🔥</p>"
    },
    {
      "name": "unrecognized_emoji_sequence_two",
      "input": "lime from 15.1: 🍋‍🟩",
      "expected_output": "<p>lime from 15.1: 🍋‍🟩</p>"
    },
    {
      "name": "unrecognized_emoji_sequence_three",
      "input": "normal lemon 🍋, purple lemon? 🍋‍🟪",
      "expected_output": "<p>normal lemon <span aria-label=\"lemon\" class=\"emoji emoji-1f34b\" role=\"img\" title=\"lemon\">:lemon:</span>, purple lemon? 🍋‍🟪</p>"
    },
    {
      "name": "unrecognized_emoji_sequence_four",
      "input": "medium-skinned person riding scooter back and forth: 🧑🏽‍🛴‍↩️",
      "expected_output": "<p>medium-skinned person riding scooter back and forth: 🧑🏽‍🛴‍↩️</p>"
    },
    {
      "name": "unrecognized_emoji_sequence_skin_tone",
      "input": "man in manual wheelchair: dark skin tone 👨🏿‍🦽",
      "expected_output": "<p>man in manual wheelchair: dark skin tone 👨🏿‍🦽</p>"
    },
    {
      "name": "emojis_without_space",
      "input": ":cat:hello:dog::rabbit:",
      "expected_output": "<p><span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span>hello<span aria-label=\"dog\" class=\"emoji emoji-1f415\" role=\"img\" title=\"dog\">:dog:</span><span aria-label=\"rabbit\" class=\"emoji emoji-1f407\" role=\"img\" title=\"rabbit\">:rabbit:</span></p>",
      "text_content": "\ud83d\udc08hello\ud83d\udc15\ud83d\udc07"
    },
    {
      "name": "emojis_newline",
      "input": ":cat:\n:dog:",
      "expected_output": "<p><span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span><br>\n<span aria-label=\"dog\" class=\"emoji emoji-1f415\" role=\"img\" title=\"dog\">:dog:</span></p>",
      "text_content": "\ud83d\udc08\n\ud83d\udc15"
    },
    {
      "name": "not_emoji",
      "input": ":not_an_emoji:",
      "expected_output": "<p>:not_an_emoji:</p>",
      "text_content": ":not_an_emoji:"
    },
    {
      "name": "unicode_emoji",
      "input": "\ud83d\udca9",
      "expected_output":"<p><span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span></p>",
      "text_content": "\ud83d\udca9"
    },
    {
      "name": "two_unicode_emoji",
      "input": "\ud83d\udca9\ud83d\udca9",
      "expected_output":"<p><span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span><span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span><\/p>",
      "text_content": "\ud83d\udca9\ud83d\udca9"
    },
    {
      "name": "two_unicode_emoji_separated_by_text",
      "input": "\ud83d\udca9 word \ud83d\udca9",
      "expected_output":"<p><span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span> word <span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span><\/p>",
      "text_content": "\ud83d\udca9 word \ud83d\udca9"
    },
    {
      "name": "miscellaneous_symbols_and_pictographs",
      "input": "Merry Christmas!!\ud83c\udf84",
      "expected_output":"<p>Merry Christmas!!<span aria-label=\"holiday tree\" class=\"emoji emoji-1f384\" role=\"img\" title=\"holiday tree\">:holiday_tree:</span><\/p>",
      "text_content": "Merry Christmas!!\ud83c\udf84"
    },
    {
      "name": "miscellaneous_and_dingbats_emoji",
      "input": "\u2693\u2797",
      "expected_output":"<p><span aria-label=\"anchor\" class=\"emoji emoji-2693\" role=\"img\" title=\"anchor\">:anchor:</span><span aria-label=\"division\" class=\"emoji emoji-2797\" role=\"img\" title=\"division\">:division:</span><\/p>"
    },
    {
      "name": "supplemental_symbols_and_pictographs",
      "input": "I am a robot \ud83e\udd16.",
      "expected_output":"<p>I am a robot <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span>.<\/p>"
    },
    {
      "name": "miscellaneous_symbols_and_arrows",
      "input": "Black upward arrow \u2b06\ufe0f",
      "expected_output":"<p>Black upward arrow <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span><\/p>"
    },
    {
      "name": "unicode_emoji_without_space",
      "input": "Extra\ud83d\udc7dTerrestrial",
      "expected_output":"<p>Extra<span aria-label=\"alien\" class=\"emoji emoji-1f47d\" role=\"img\" title=\"alien\">:alien:</span>Terrestrial<\/p>"
    },
    {
      "name": "unicode_emojis_new_line",
      "input": "\ud83d\udc7d\n\ud83d\udc7d",
      "expected_output":"<p><span aria-label=\"alien\" class=\"emoji emoji-1f47d\" role=\"img\" title=\"alien\">:alien:</span><br>\n<span aria-label=\"alien\" class=\"emoji emoji-1f47d\" role=\"img\" title=\"alien\">:alien:</span></p>",
      "text_content": "\ud83d\udc7d\n\ud83d\udc7d"
    },
    {
      "name": "emoji_alongside_punctuation",
      "input": ":smile:, :smile:; :smile:",
      "expected_output": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>; <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>"
    },
    {
      "name": "new_emoji_test",
      "input": ":avocado:, :kiwi:, :selfie:, :gear:, :comet:, :gold:",
      "expected_output": "<p><span aria-label=\"avocado\" class=\"emoji emoji-1f951\" role=\"img\" title=\"avocado\">:avocado:</span>, <span aria-label=\"kiwi\" class=\"emoji emoji-1f95d\" role=\"img\" title=\"kiwi\">:kiwi:</span>, <span aria-label=\"selfie\" class=\"emoji emoji-1f933\" role=\"img\" title=\"selfie\">:selfie:</span>, <span aria-label=\"gear\" class=\"emoji emoji-2699\" role=\"img\" title=\"gear\">:gear:</span>, <span aria-label=\"comet\" class=\"emoji emoji-2604\" role=\"img\" title=\"comet\">:comet:</span>, <span aria-label=\"gold\" class=\"emoji emoji-1f947\" role=\"img\" title=\"gold\">:gold:</span></p>"
    },
    {
      "name": "emoji_pipeline_newline",
      "input": "The winner is:\nsmiley:smiley:",
      "expected_output": "<p>The winner is:<br>\nsmiley<span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>"
    },
    {
      "name": "emoji_pipeline_emphasis",
      "input": "Testing *:smiley*: :sm*iley*: Testing",
      "expected_output": "<p>Testing <em>:smiley</em>: :sm<em>iley</em>: Testing</p>"
    },
    {
      "name": "emoji_pipeline_link",
      "input": "Visit https:smiley://google.com.",
      "expected_output": "<p>Visit https<span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>//google.com.</p>"
    },
    {
      "name": "skin_tones_are_banned",
      "input": ":skin-tone-2: :skin-tone-3:",
      "expected_output": "<p>:skin-tone-2: :skin-tone-3:</p>"
    },
    {
      "name": "fried_egg_emoji_nonexistent",
      "input": "new :fried_egg: emoji is banned for now.",
      "expected_output": "<p>new :fried_egg: emoji is banned for now.</p>"
    },
    {
      "name": "emojis_with_zwj_are_banned",
      "input": "Emojis like :man-girl-girl: which have ZWJ are banned for now.",
      "expected_output": "<p>Emojis like :man-girl-girl: which have ZWJ are banned for now.</p>",
      "text_content": "Emojis like :man-girl-girl: which have ZWJ are banned for now."
    },
    {
      "name": "valid_emoji_preceded_by_invalid_emoji",
      "input": "This is :invalidemoji: which should not prevent rendering :smile:",
      "expected_output": "<p>This is :invalidemoji: which should not prevent rendering <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>"
    },
    {
      "name": "safe_html",
      "input": "<h1>stay normal</h1> thanks",
      "expected_output": "<p>&lt;h1&gt;stay normal&lt;/h1&gt; thanks</p>",
      "text_content": "<h1>stay normal<\/h1> thanks"
    },
    {
      "name": "safe_html_with_simple_script_tag",
      "input": "<script>alert(1)</script>",
      "expected_output": "<p>&lt;script&gt;alert(1)&lt;/script&gt;</p>",
      "marked_expected_output": "<p>&lt;script&gt;alert(1)&lt;/script&gt;\n\n</p>",
      "text_content": "<script>alert(1)<\/script>"
    },
    {
      "name": "safe_html_nested_script_tag",
      "input": "<<script>script>evil()<</script>/script>",
      "expected_output": "<p>&lt;&lt;script&gt;script&gt;evil()&lt;&lt;/script&gt;/script&gt;</p>",
      "text_content": "<<script>script>evil()<<\/script>\/script>"
    },
    {
      "name": "safe_html_nested_script_tag_with_parse_error",
      "input": "<<x>script>evil()<</x>/script>",
      "expected_output": "<p>&lt;&lt;x&gt;script&gt;evil()&lt;&lt;/x&gt;/script&gt;</p>",
      "text_content": "<<x>script>evil()<<\/x>\/script>"
    },
    {
      "name": "safe_html_messed_up_complexly_nested_script_tags",
      "input": "<scr<script></script>ipt type=\"text/javascript\">alert(\"foo\");</<script></script>script<del></del>>",
      "expected_output": "<p>&lt;scr&lt;script&gt;&lt;/script&gt;ipt type=\"text/javascript\"&gt;alert(\"foo\");&lt;/&lt;script&gt;&lt;/script&gt;script&lt;del&gt;&lt;/del&gt;&gt;</p>"
    },
    {
      "name": "safe_html_unclosed_tag",
      "input": "<script src=http://xx.com/xss.js<b>",
      "expected_output": "<p>&lt;script src=http://xx.com/xss.js&lt;b&gt;</p>",
      "marked_expected_output": "<p>&lt;script src=http://xx.com/xss.js&lt;b&gt;\n\n</p>"
    },
    {
      "name": "safe_html_unclosed_tag_and_quotes",
      "input": "<script src=\"http://xx.com/xss.js\"<b>",
      "expected_output": "<p>&lt;script src=\"http://xx.com/xss.js\"&lt;b&gt;</p>",
      "marked_expected_output": "<p>&lt;script src=&quot;http://xx.com/xss.js&quot;&lt;b&gt;\n\n</p>"
    },
    {
      "name": "safe_html_in_code",
      "input": "~~~\n<h1>stay normal</h1>",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code>&lt;h1&gt;stay normal&lt;/h1&gt;\n</code></pre></div>",
      "text_content": "<h1>stay normal<\/h1>\n"
    },
    {
      "name": "ulist_with_inline_code",
      "input": "gonna take a break for a bit--all yours if you want to play around too. what I did:\n\n* install cmake\n* git clone zulip desktop\n* run `cmake-gui ..` in `c:\\zulip\\zulip-desktop\\msvcbuild`\n* hit configure/generate until it generated the msvc project (had to make a fix to some cmake files)\n* opened vs2013 \n* tried to build\n",
      "expected_output": "<p>gonna take a break for a bit--all yours if you want to play around too. what I did:</p>\n<ul>\n<li>install cmake</li>\n<li>git clone zulip desktop</li>\n<li>run <code>cmake-gui ..</code> in <code>c:\\zulip\\zulip-desktop\\msvcbuild</code></li>\n<li>hit configure/generate until it generated the msvc project (had to make a fix to some cmake files)</li>\n<li>opened vs2013 </li>\n<li>tried to build</li>\n</ul>",
      "text_content": "gonna take a break for a bit--all yours if you want to play around too. what I did:\n\ninstall cmake\ngit clone zulip desktop\nrun cmake-gui .. in c:\\zulip\\zulip-desktop\\msvcbuild\nhit configure\/generate until it generated the msvc project (had to make a fix to some cmake files)\nopened vs2013 \ntried to build\n"
    },
    {
      "name": "timestamp_backend_markdown_only",
      "input": "<time:Jun 5th 2017, 10:30PM>",
      "expected_output": "<p><time datetime=\"2017-06-05T22:30:00Z\">Jun 5th 2017, 10:30PM</time></p>",
      "marked_expected_output": "<p><span>Jun 5th 2017, 10:30PM</span></p>",
      "text_content": "Jun 5th 2017, 10:30PM"
    },
    {
      "name": "timestamp_backend_markdown_and_marked",
      "input": "<time:31 Dec 2017>",
      "expected_output": "<p><time datetime=\"2017-12-31T00:00:00Z\">31 Dec 2017</time></p>",
      "text_content": "31 Dec 2017"
    },
    {
      "name": "timestamp_invalid_input",
      "input": "<time:<alert(1)>>",
      "expected_output": "<p><span class=\"timestamp-error\">Invalid time format: &lt;alert(1)</span>&gt;</p>",
      "marked_expected_output": "<p><span>&lt;alert(1)</span>&gt;</p>",
      "text_content": "Invalid time format: <alert(1)>"
    },
    {
      "name": "timestamp_timezone",
      "input": "<time:31 Dec 2017 5:30 am IST>",
      "expected_output": "<p><time datetime=\"2017-12-31T00:00:00Z\">31 Dec 2017 5:30 am IST</time></p>",
      "marked_expected_output": "<p><span>31 Dec 2017 5:30 am IST</span></p>",
      "text_content": "31 Dec 2017 5:30 am IST"
    },
    {
      "name": "timestamp_incorrect",
      "input": "<time:**hello world**>",
      "expected_output": "<p><span class=\"timestamp-error\">Invalid time format: **hello world**</span></p>",
      "marked_expected_output": "<p><span>**hello world**</span></p>",
      "text_content": "Invalid time format: **hello world**"
    },
    {
      "name": "timestamp_unix",
      "input": "Let's meet at <time:1496701800>.",
      "expected_output": "<p>Let's meet at <time datetime=\"2017-06-05T22:30:00Z\">1496701800</time>.</p>",
      "text_content": "Let's meet at 1496701800."
    },
    {
      "name": "tex_inline",
      "input": "$$1 \\oplus 0 = 1$$",
      "expected_output": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⊕</mo><mn>0</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 \\oplus 0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
      "text_content": "$$1 \\oplus 0 = 1$$"
    },
    {
      "name": "tex_complex",
      "input": "$$\\Phi_E = \\oint E \\cdot dA$$",
      "expected_output": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Φ</mi><mi>E</mi></msub><mo>=</mo><mo>∮</mo><mi>E</mi><mo>⋅</mo><mi>d</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\Phi_E = \\oint E \\cdot dA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111em;vertical-align:-0.3061em;\"></span><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∮</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">A</span></span></span></span></p>"
    },
    {
      "name": "tex_escaped",
      "input": "`$$a$$`",
      "expected_output": "<p><code>$$a$$</code></p>"
    },
    {
      "name": "tex_fenced_math",
      "input": "```math\na^2 = b^2 + c^2\n```",
      "expected_output": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">a^2 = b^2 + c^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>",
      "text_content": "$$a^2 = b^2 + c^2$$"
    },
    {
      "name": "tex_fenced_tex",
      "input": "```tex\n\n\\pi \\textbf{ is not } 3.14\n```",
      "expected_output": "<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code><span class=\"k\">\\pi</span> <span class=\"k\">\\textbf</span><span class=\"nb\">{</span> is not <span class=\"nb\">}</span> 3.14\n</code></pre></div>",
      "marked_expected_output": "<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code>\\pi \\textbf{ is not } 3.14\n</code></pre></div>"
    },
    {
      "name": "tex_fenced_latex",
      "input": "```latex\n\n\\pi \\textbf{ is not } 3.14\n```",
      "expected_output": "<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code><span class=\"k\">\\pi</span> <span class=\"k\">\\textbf</span><span class=\"nb\">{</span> is not <span class=\"nb\">}</span> 3.14\n</code></pre></div>",
      "marked_expected_output": "<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code>\\pi \\textbf{ is not } 3.14\n</code></pre></div>"
    },
    {
      "name": "tex_money",
      "input": "Tickets are $5 to $20 for youth, $10-$30 for adults, so we are hoping to bring in $500 from the event ($$x \\approx 500\\$$$)",
      "expected_output": "<p>Tickets are $5 to $20 for youth, $10-$30 for adults, so we are hoping to bring in $500 from the event (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≈</mo><mn>500</mn><mi mathvariant=\"normal\">$</mi></mrow><annotation encoding=\"application/x-tex\">x \\approx 500\\$</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4831em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">500$</span></span></span></span>)</p>"
    },
    {
      "name": "tex_inline_permissive_spacing",
      "input": "$$    x =  7   $$",
      "expected_output": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">    x =  7   </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span></p>"
    },
    {
      "name": "tex_inline_prohibited_newline",
      "input": "$$x=3\ny=4$$",
      "expected_output": "<p>$$x=3<br>\ny=4$$</p>"
    },
    {
      "name": "tex_dollar_smiley",
      "input": "$$_$$ is a fun money-related smiley!",
      "expected_output": "<p>$$_$$ is a fun money-related smiley!</p>"
    },
    {
      "name": "tex_multiple_dollars",
      "input": "We are going to make some $$$ or maybe even $$$$!",
      "expected_output": "<p>We are going to make some $$$ or maybe even $$$$!</p>"
    },
    {
      "name": "tex_non_matching_dollar_count",
      "input": "$foo is$$",
      "expected_output": "<p>$foo is$$</p>"
    },
    {
      "name": "tex_safe_script_tag",
      "input": "$$<script type='text/javascript'>alert('xss');</script>$$\n\n~~~math\n<script type='text/javascript'>alert('xss');</script>\n~~~",
      "expected_output": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>j</mi><mi>a</mi><mi>v</mi><mi>a</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><msup><mi>t</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mo>&gt;</mo><mi>a</mi><mi>l</mi><mi>e</mi><mi>r</mi><mi>t</mi><msup><mo stretchy=\"false\">(</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mi>x</mi><mi>s</mi><msup><mi>s</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">;</mo><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;script type=&#x27;text/javascript&#x27;&gt;alert(&#x27;xss&#x27;);&lt;/script&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">scr</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ptt</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">ja</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">scr</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\"><span class=\"mopen\">(</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">scr</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">pt</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>&lt;</mo><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>j</mi><mi>a</mi><mi>v</mi><mi>a</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><msup><mi>t</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mo>&gt;</mo><mi>a</mi><mi>l</mi><mi>e</mi><mi>r</mi><mi>t</mi><msup><mo stretchy=\"false\">(</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mi>x</mi><mi>s</mi><msup><mi>s</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">\u2032</mo></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">;</mo><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;script type=&#x27;text/javascript&#x27;&gt;alert(&#x27;xss&#x27;);&lt;/script&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9963em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">scr</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ptt</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">ja</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">scr</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\"><span class=\"mopen\">(</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">\u2032</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">scr</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">pt</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span></span></p>"
    },
    {
      "name": "tex_error_safe_script_tag",
      "input": "$$\\<script type='text/javascript'>alert('xss');</script>$$\n\n~~~math\n\\<script type='text/javascript'>alert('xss');</script>\n~~~",
      "expected_output": "<p><span class=\"tex-error\">$$\\&lt;script type='text/javascript'&gt;alert('xss');&lt;/script&gt;$$</span></p>\n<p><span class=\"tex-error\">\\&lt;script type=&#x27;text/javascript&#x27;&gt;alert(&#x27;xss&#x27;);&lt;/script&gt;</span></p>"
    },
    {
      "name": "tex_inline_no_markdown_inside",
      "input": "$$\\text{**a**}$$",
      "expected_output": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>**a**</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{**a**}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"mord text\"><span class=\"mord\">**a**</span></span></span></span></span></p>"
    },
    {
      "name": "tex_display_no_markdown_inside",
      "input": "~~~math\n\\text{**a**}\n~~~",
      "expected_output": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>**a**</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{**a**}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"mord text\"><span class=\"mord\">**a**</span></span></span></span></span></span></p>"
    },
    {
      "name": "tex_inline_error_no_markdown_inside",
      "input": "$$\\error{**a**}$$",
      "expected_output": "<p><span class=\"tex-error\">$$\\error{**a**}$$</span></p>"
    },
    {
      "name": "tex_display_error_no_markdown_inside",
      "input": "~~~math\n\\error{**a**}\n~~~",
      "expected_output": "<p><span class=\"tex-error\">\\error{**a**}</span></p>"
    },
    {
      "name": "auto_renumbered_list_blankline",
      "input": "1. A\n\n1. B\n\n1. C\n\n1. D\nordinary paragraph\n1. AA\n\n1. BB",
      "expected_output": "<ol>\n<li>\n<p>A</p>\n</li>\n<li>\n<p>B</p>\n</li>\n<li>\n<p>C</p>\n</li>\n<li>\n<p>D<br>\nordinary paragraph</p>\n</li>\n<li>\n<p>AA</p>\n</li>\n<li>\n<p>BB</p>\n</li>\n</ol>",
      "marked_expected_output": "<ol>\n<li><p>A</p>\n</li>\n<li><p>B</p>\n</li>\n<li><p>C</p>\n</li>\n<li><p>D<br>\nordinary paragraph</p>\n</li>\n<li><p>AA</p>\n</li>\n<li><p>BB</p>\n</li>\n</ol>",
      "text_content": "1. A\n2. B\n3. C\n4. D\nordinary paragraph\n5. AA\n6. BB"
    },
    {
      "name": "spoilers_fenced_spoiler",
      "input": "```spoiler header\ncontent\n```\noutside spoiler\n",
      "expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>content</p>\n</div></div>\n<p>outside spoiler</p>",
      "text_content": "header (…)\noutside spoiler"
    },
    {
      "name": "spoilers_empty_header",
      "input": "```spoiler\ncontent\n```\noutside spoiler\n",
      "expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>content</p>\n</div></div>\n<p>outside spoiler</p>",
      "text_content": "(…)\noutside spoiler"
    },
    {
      "name": "spoilers_script_tags",
      "input": "```spoiler <script>alert(1)</script>\n<script>alert(1)</script>\n```",
      "expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>&lt;script&gt;alert(1)&lt;/script&gt;</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>&lt;script&gt;alert(1)&lt;/script&gt;</p>\n</div></div>",
      "marked_expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>&lt;script&gt;alert(1)&lt;/script&gt;\n\n</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>&lt;script&gt;alert(1)&lt;/script&gt;\n\n</p>\n</div></div>",
      "text_content": "<script>alert(1)</script> (…)\n"
    },
    {
      "name": "spoilers_block_quote",
      "input": "~~~quote\n```spoiler header\ncontent\n```\noutside spoiler\n~~~\noutside quote",
      "expected_output": "<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>content</p>\n</div></div>\n<p>outside spoiler</p>\n</blockquote>\n<p>outside quote</p>",
      "text_content": "> header (…)\n> outside spoiler\n\noutside quote"
    },
    {
      "name": "spoilers_with_header_markdown",
      "input": "```spoiler [Header](https://example.com) :smile:\ncontent\n```",
      "expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><a href=\"https://example.com\">Header</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>content</p>\n</div></div>",
      "text_content": "Header 🙂 (…)\n"
    },
    {
      "name": "spoiler_with_inline_image",
      "input": "```spoiler header\nContent http://example.com/image.png\n```",
      "expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Content <a href=\"http://example.com/image.png\">http://example.com/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"http://example.com/image.png\"><img data-src-fullsize=\"/thumbnail?url=http%3A%2F%2Fexample.com%2Fimage.png&amp;size=full\" src=\"/thumbnail?url=http%3A%2F%2Fexample.com%2Fimage.png&amp;size=thumbnail\"></a></div></div></div>",
      "marked_expected_output": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Content <a href=\"http://example.com/image.png\">http://example.com/image.png</a></p>\n</div></div>",
      "text_content": "header (…)\n"
    },
    {
      "name": "embedded_link_inside_Bold",
      "input": "**[Static types in Python](https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy)**",
      "expected_output": "<p><strong><a href=\"https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy\">Static types in Python</a></strong></p>"
    },
    {
      "name": "embedded_link_inside_Italic",
      "input": "*[Static types in Python](https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy)*",
      "expected_output": "<p><em><a href=\"https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy\">Static types in Python</a></em></p>"
    },
    {
      "name": "edge_case_embedded_link_inside_Bold",
      "input": "<h1>**<h1>[<h2>Static types in Python</h2>](https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy)</h1>**</h1>",
      "expected_output": "<p>&lt;h1&gt;<strong>&lt;h1&gt;<a href=\"https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy\">&lt;h2&gt;Static types in Python&lt;/h2&gt;</a>&lt;/h1&gt;</strong>&lt;/h1&gt;</p>",
      "marked_expected_output": "<p>&lt;h1&gt;<strong>&lt;h1&gt;<a href=\"https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy\">&lt;h2&gt;Static types in Python&lt;/h2&gt;</a>&lt;/h1&gt;</strong>&lt;/h1&gt;\n\n</p>"
    },
    {
      "name": "edge_case_embedded_link_inside_Italic",
      "input": "<h1>*<h1>[<h2>Static types in Python</h2>](https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy)</h1>*</h1>",
      "expected_output": "<p>&lt;h1&gt;<em>&lt;h1&gt;<a href=\"https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy\">&lt;h2&gt;Static types in Python&lt;/h2&gt;</a>&lt;/h1&gt;</em>&lt;/h1&gt;</p>",
      "marked_expected_output": "<p>&lt;h1&gt;<em>&lt;h1&gt;<a href=\"https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy\">&lt;h2&gt;Static types in Python&lt;/h2&gt;</a>&lt;/h1&gt;</em>&lt;/h1&gt;\n\n</p>"
    },
    {
        "name": "telephone_sms_link",
        "input": "[call me](tel:+14155551234) [or maybe not](sms:+14155551234)",
        "expected_output": "<p><a href=\"tel:+14155551234\">call me</a> <a href=\"sms:+14155551234\">or maybe not</a></p>"
    },
    {
      "name": "codeblock_hilite_shebang_feature_no_path_1",
      "input": "```\n#!python\nprint(\"Hello World\")\n```",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!python</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello World&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "marked_expected_output": "<div class=\"codehilite\"><pre><span></span><code>#!python\nprint(&quot;Hello World&quot;)\n</code></pre></div>"
    },
    {
      "name": "codeblock_hilite_shebang_feature_no_path_2",
      "input": "```\n:::python\nprint(\"Hello World\")\n```",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">:::</span><span class=\"n\">python</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello World&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "marked_expected_output": "<div class=\"codehilite\"><pre><span></span><code>:::python\nprint(&quot;Hello World&quot;)\n</code></pre></div>"
    },
    {
      "name": "codeblock_hilite_shebang_feature_with_path",
      "input": "```\n#!/usr/bin/python\nprint(\"Hello World\")\n```",
      "expected_output": "<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/python</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello World&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "marked_expected_output": "<div class=\"codehilite\"><pre><span></span><code>#!/usr/bin/python\nprint(&quot;Hello World&quot;)\n</code></pre></div>"
    },
    {
      "name": "codeblock_hilite_startinline_php",
      "input": "```php\n  $var = function($var, 'string');\n```\nPHP\n```css+php\n  $var = function($var, 'string');\n```\nCSS + PHP\n```html+php\n  $var = function($var, 'string');\n```\nHTML + PHP\n```javascript+php\n  $var = function($var, 'string');\n```\nJAVASCRIPT + PHP\n```xml+php\n  $var = function($var, 'string');\n```\nXML + PHP\n```php\n  <?php\n  $var = function($var, 'string');\n```\nWITH MARKER",
      "expected_output": "<div class=\"codehilite\" data-code-language=\"PHP\"><pre><span></span><code>  <span class=\"nv\">$var</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$var</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>PHP</p>\n<div class=\"codehilite\" data-code-language=\"CSS+PHP\"><pre><span></span><code>  <span class=\"nv\">$var</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$var</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>CSS + PHP</p>\n<div class=\"codehilite\" data-code-language=\"HTML+PHP\"><pre><span></span><code>  <span class=\"nv\">$var</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$var</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>HTML + PHP</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript+PHP\"><pre><span></span><code>  <span class=\"nv\">$var</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$var</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>JAVASCRIPT + PHP</p>\n<div class=\"codehilite\" data-code-language=\"XML+PHP\"><pre><span></span><code>  <span class=\"nv\">$var</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$var</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>XML + PHP</p>\n<div class=\"codehilite\" data-code-language=\"PHP\"><pre><span></span><code>  <span class=\"o\">&lt;?</span><span class=\"nx\">php</span>\n  <span class=\"nv\">$var</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"nv\">$var</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>WITH MARKER</p>",
      "marked_expected_output": "<div class=\"codehilite\" data-code-language=\"PHP\"><pre><span></span><code>  $var = function($var, 'string');\n</code></pre></div>\n<p>PHP</p>\n<div class=\"codehilite\" data-code-language=\"CSS+PHP\"><pre><span></span><code>  $var = function($var, 'string');\n</code></pre></div>\n<p>CSS + PHP</p>\n<div class=\"codehilite\" data-code-language=\"HTML+PHP\"><pre><span></span><code>  $var = function($var, 'string');\n</code></pre></div>\n<p>HTML + PHP</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript+PHP\"><pre><span></span><code>  $var = function($var, 'string');\n</code></pre></div>\n<p>JAVASCRIPT + PHP</p>\n<div class=\"codehilite\" data-code-language=\"XML+PHP\"><pre><span></span><code>  $var = function($var, 'string');\n</code></pre></div>\n<p>XML + PHP</p>\n<div class=\"codehilite\" data-code-language=\"PHP\"><pre><span></span><code>  &lt;?php\n  $var = function($var, 'string');\n</code></pre></div>\n<p>WITH MARKER</p>"
    }
  ],
  "linkify_tests": [
    [
      "http://www.google.com",
      "<p>%s</p>",
      "http://www.google.com"
    ],
    [
      "https://www.google.com",
      "<p>%s</p>",
      "https://www.google.com"
    ],
    [
      "http://www.theregister.co.uk/foo/bar",
      "<p>%s</p>",
      "http://www.theregister.co.uk/foo/bar"
    ],
    [
      " some text https://www.google.com/",
      "<p>some text %s</p>",
      "https://www.google.com/"
    ],
    [
      "with short example.com url",
      "<p>with short %s url</p>",
      "example.com"
    ],
    [
      "t.co",
      "<p>%s</p>",
      "t.co"
    ],
    [
      "readme.md",
      "<p>readme.md</p>",
      "readme.md"
    ],
    [
      "go to views.org please",
      "<p>go to %s please</p>",
      "views.org"
    ],
    [
      "http://foo.com/blah_blah/",
      "<p>%s</p>",
      "http://foo.com/blah_blah/"
    ],
    [
      "python class views.py is",
      "<p>python class views.py is</p>",
      ""
    ],
    [
      "with www www.zulip.com/foo ok?",
      "<p>with www %s ok?</p>",
      "www.zulip.com/foo"
    ],
    [
      "allow questions like foo.com?",
      "<p>allow questions like %s?</p>",
      "foo.com"
    ],
    [
      "\"is.gd/foo/ \"",
      "<p>\"%s \"</p>",
      "is.gd/foo/"
    ],
    [
      "end of sentence https://t.co.",
      "<p>end of sentence %s.</p>",
      "https://t.co"
    ],
    [
      "(Something like http://foo.com/blah_blah)",
      "<p>(Something like %s)</p>",
      "http://foo.com/blah_blah"
    ],
    [
      "\"is.gd/foo/\"",
      "<p>\"%s\"</p>",
      "is.gd/foo/"
    ],
    [
      "end with a quote www.google.com\"",
      "<p>end with a quote %s\"</p>",
      "www.google.com"
    ],
    [
      "end with an exclamation www.google.com!",
      "<p>end with an exclamation %s!</p>",
      "www.google.com"
    ],
    [
      "http://www.guardian.co.uk/foo/bar",
      "<p>%s</p>",
      "http://www.guardian.co.uk/foo/bar"
    ],
    [
      "from http://supervisord.org/running.html:",
      "<p>from %s:</p>",
      "http://supervisord.org/running.html"
    ],
    [
      "http://raven.io",
      "<p>%s</p>",
      "http://raven.io"
    ],
    [
      "at https://zulip.com/api. Check it!",
      "<p>at %s. Check it!</p>",
      "https://zulip.com/api"
    ],
    [
      "goo.gl/abc",
      "<p>%s</p>",
      "goo.gl/abc"
    ],
    [
      "I spent a year at ucl.ac.uk",
      "<p>I spent a year at %s</p>",
      "ucl.ac.uk"
    ],
    [
      "http://a.cc/i/FMXO",
      "<p>%s</p>",
      "http://a.cc/i/FMXO"
    ],
    [
      "http://fmota.eu/blog/test.html",
      "<p>%s</p>",
      "http://fmota.eu/blog/test.html"
    ],
    [
      "http://j.mp/14Hwm3X",
      "<p>%s</p>",
      "http://j.mp/14Hwm3X"
    ],
    [
      "http://localhost:9991/?show_debug=1",
      "<p>%s</p>",
      "http://localhost:9991/?show_debug=1"
    ],
    [
      "anyone before? (http://a.cc/i/FMXO)",
      "<p>anyone before? (%s)</p>",
      "http://a.cc/i/FMXO"
    ],
    [
      "(http://en.wikipedia.org/wiki/Each-way_(bet))",
      "<p>(%s)</p>",
      "http://en.wikipedia.org/wiki/Each-way_(bet)"
    ],
    [
      "(http://en.wikipedia.org/wiki/Each-way_(bet)_(more_parens))",
      "<p>(%s)</p>",
      "http://en.wikipedia.org/wiki/Each-way_(bet)_(more_parens)"
    ],
    [
      "http://en.wikipedia.org/wiki/Qt_(framework)",
      "<p>%s</p>",
      "http://en.wikipedia.org/wiki/Qt_(framework)"
    ],
    [
      "http://fr.wikipedia.org/wiki/Fichier:SMirC-facepalm.svg",
      "<p>%s</p>",
      "http://fr.wikipedia.org/wiki/Fichier:SMirC-facepalm.svg"
    ],
    [
      "https://jira.atlassian.com/browse/JRA-31953?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel",
      "<p>%s</p>",
      "https://jira.atlassian.com/browse/JRA-31953?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel"
    ],
    [
      "http://web.archive.org/web/20120630032016/http://web.mit.edu/mitcard/idpolicies.html",
      "<p>%s</p>",
      "http://web.archive.org/web/20120630032016/http://web.mit.edu/mitcard/idpolicies.html"
    ],
    [
      "http://www.postgresql.org/message-id/14040.1364490185@sss.pgh.pa.us",
      "<p>%s</p>",
      "http://www.postgresql.org/message-id/14040.1364490185@sss.pgh.pa.us"
    ],
    [
      "javascript:alert(\"hi\");.com",
      "<p>javascript:alert(\"hi\");.com</p>",
      ""
    ],
    [
      "javascript:foo.com",
      "<p>javascript:%s</p>",
      "foo.com"
    ],
    [
      "javascript://foo.com",
      "<p>javascript://foo.com</p>",
      ""
    ],
    [
      "foobarscript://foo.com",
      "<p>foobarscript://foo.com</p>",
      ""
    ],
    [
      "about:blank.com",
      "<p>about:%s</p>",
      "blank.com"
    ],
    [
      "[foo](javascript:foo.com)",
      "<p>[foo](javascript:%s)</p>",
      "foo.com"
    ],
    [
      "[foo](javascript://foo.com)",
      "<p>[foo](javascript://foo.com)</p>",
      ""
    ],
    [
      "aim:addbuddy?screenname=foo",
      "<p>aim:addbuddy?screenname=foo</p>",
      ""
    ],
    [
      "itms://itunes.com/apps/appname",
      "<p>itms://itunes.com/apps/appname</p>",
      ""
    ],
    [
      "[foo](itms://itunes.com/apps/appname)",
      "<p>[foo](itms://itunes.com/apps/appname)</p>",
      ""
    ],
    [
      "1 [](foo://) 3 [](foo://) 5",
      "<p>1 [](foo://) 3 [](foo://) 5</p>",
      ""
    ],
    [
      "javascript:<i>\"foo&bar\"</i>",
      "<p>javascript:&lt;i&gt;\"foo&amp;bar\"&lt;/i&gt;</p>",
      ""
    ],
    [
      "[foo](javascript:<i>\"foo&bar\"</i>)",
      "<p>[foo](javascript:&lt;i&gt;\"foo&amp;bar\"&lt;/i&gt;)</p>",
      ""
    ],
    [
      "http://zulip.testserver/#narrow/stream/1-Denmark",
      "<p><a href=\"#narrow/stream/1-Denmark\">http://zulip.testserver/#narrow/stream/1-Denmark</a></p>",
      ""
    ],
    [
      "http://zulip.testserver/https://example.com",
      "<p>%s</p>",
      "http://zulip.testserver/https://example.com"
    ],
    [
      "a@b.com",
      "<p>%s</p>",
      "a@b.com"
    ],
    [
      "<a@b.com>",
      "<p>&lt;%s&gt;</p>",
      "a@b.com"
    ],
    [
      "a@b.com/foo",
      "<p>a@b.com/foo</p>",
      ""
    ],
    [
      "http://leo@foo.com/my/file",
      "<p>%s</p>",
      "http://leo@foo.com/my/file"
    ],
    [
      "http://example.com/something?with,commas,in,url, but not at end",
      "<p>%s, but not at end</p>",
      "http://example.com/something?with,commas,in,url"
    ],
    [
      "http://www.yelp.com/biz/taim-mobile-falafel-and-smoothie-truck-new-york#query",
      "<p>%s</p>",
      "http://www.yelp.com/biz/taim-mobile-falafel-and-smoothie-truck-new-york#query"
    ],
    [
      " some text https://www.google.com/baz_(match)?with=foo&bar=baz with extras",
      "<p>some text %s with extras</p>",
      "https://www.google.com/baz_(match)?with=foo&amp;bar=baz"
    ],
    [
      "hash it http://foo.com/blah_(wikipedia)_blah#cite-1",
      "<p>hash it %s</p>",
      "http://foo.com/blah_(wikipedia)_blah#cite-1"
    ],
    [
      "https://metacpan.org/module/Image::Resize::OpenCV",
      "<p>%s</p>",
      "https://metacpan.org/module/Image::Resize::OpenCV"
    ],
    [
      "foo.com/a::trollface::b",
      "<p>%s</p>",
      "foo.com/a::trollface::b"
    ],
    [
      "a.commandstuff()",
      "<p>a.commandstuff()</p>",
      ""
    ],
    [
      "love...it",
      "<p>love...it</p>",
      ""
    ],
    [
      "sorry,http://example.com/",
      "<p>sorry,%s</p>",
      "http://example.com/"
    ],
    [
      "two nested parens https://zulip.com/(we_like_(to_nest_)_nest)_nest",
      "<p>two nested parens %s</p>",
      "https://zulip.com/(we_like_(to_nest_)_nest)_nest"
    ],
    [
      "three nested parens https://zulip.com/(we_like_(to_(and_)nest_)_nest)_nest",
      "<p>three nested parens %s</p>",
      "https://zulip.com/(we_like_(to_(and_)nest_)_nest)_nest"
    ],
    [
      "four nested parens https://zulip.com/(we_like_(to_n(e)st_)_n(es)t)_nest",
      "<p>four nested parens %s</p>",
      "https://zulip.com/(we_like_(to_n(e)st_)_n(es)t)_nest"
    ],
    [
      "six nested parens https://zulip.com/(we_like_((t(d(o(___)o)o))o_nest_)_nest)_nest",
      "<p>six nested parens %s</p>",
      "https://zulip.com/(we_like_((t(d(o(___)o)o))o_nest_)_nest)_nest"
    ],
    [
      "eight is too many https://zulip.com/(we_like_((t(d(o(_(1(2)1)__)o)o))o_nest_)_nest)_nest",
      "<p>eight is too many https://zulip.com/(we_like_((t(d(o(_(1(2)1)__)o)o))o_nest_)_nest)_nest</p>",
      ""
    ],
    [
      "nested with autodetection zulip.us/(we_like_(to_n(e)st_)_n(es)t)_nest",
      "<p>nested with autodetection %s</p>",
      "zulip.us/(we_like_(to_n(e)st_)_n(es)t)_nest"
    ],
    [
      "quora http://generate.quora.net/render?width=700&from=-4hours&until=now&height=400&bgcolor=black&lineMode=connected&title=arb%20hint%20status&target=alias(ans.hintland.hand.arb.enhint_rate%2C%22enhint%20rate%22)&target=alias(ans.hintland.hand.arb.unhint_rate%2C%22unhint%20rate%22)&target=alias(ans.hintland.hand.arb.size%2C%22hint%20size%22)&target=alias(scale(ans.vagabond.dingarb_cube_count%2C10000)%2C%22cube%20count%20x%2010K%22)&target=alias(scale(hnumbers.time.ding.gegevens.query.count%2C10)%2C%22ding%20gegevens%20query%20count%20x%2010%22)&fgcolor=white&uniq=0.44046106841415167",
      "<p>quora %s</p>",
      "http://generate.quora.net/render?width=700&amp;from=-4hours&amp;until=now&amp;height=400&amp;bgcolor=black&amp;lineMode=connected&amp;title=arb%20hint%20status&amp;target=alias(ans.hintland.hand.arb.enhint_rate%2C%22enhint%20rate%22)&amp;target=alias(ans.hintland.hand.arb.unhint_rate%2C%22unhint%20rate%22)&amp;target=alias(ans.hintland.hand.arb.size%2C%22hint%20size%22)&amp;target=alias(scale(ans.vagabond.dingarb_cube_count%2C10000)%2C%22cube%20count%20x%2010K%22)&amp;target=alias(scale(hnumbers.time.ding.gegevens.query.count%2C10)%2C%22ding%20gegevens%20query%20count%20x%2010%22)&amp;fgcolor=white&amp;uniq=0.44046106841415167"
    ]
  ]
}
